// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from dto.proto

package com.poi.dto;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class ProximityResponse implements Externalizable, Message<ProximityResponse>
{

    public static Schema<ProximityResponse> getSchema()
    {
        return SCHEMA;
    }

    public static ProximityResponse getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ProximityResponse DEFAULT_INSTANCE = new ProximityResponse();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    List<PoiDTO> poiDTO;

    public ProximityResponse()
    {
        
    }

    // getters and setters

    // poiDTO

    public List<PoiDTO> getPoiDTOList()
    {
        return poiDTO;
    }

    public ProximityResponse setPoiDTOList(List<PoiDTO> poiDTO)
    {
        this.poiDTO = poiDTO;
        return this;
    }

    public PoiDTO getPoiDTO(int index)
    {
        return poiDTO == null ? null : poiDTO.get(index);
    }

    public int getPoiDTOCount()
    {
        return poiDTO == null ? 0 : poiDTO.size();
    }

    public ProximityResponse addPoiDTO(PoiDTO poiDTO)
    {
        if(this.poiDTO == null)
            this.poiDTO = new ArrayList<PoiDTO>();
        this.poiDTO.add(poiDTO);
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<ProximityResponse> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<ProximityResponse> SCHEMA = new Schema<ProximityResponse>()
    {
        // schema methods

        public ProximityResponse newMessage()
        {
            return new ProximityResponse();
        }

        public Class<ProximityResponse> typeClass()
        {
            return ProximityResponse.class;
        }

        public String messageName()
        {
            return ProximityResponse.class.getSimpleName();
        }

        public String messageFullName()
        {
            return ProximityResponse.class.getName();
        }

        public boolean isInitialized(ProximityResponse message)
        {
            return true;
        }

        public void mergeFrom(Input input, ProximityResponse message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        if(message.poiDTO == null)
                            message.poiDTO = new ArrayList<PoiDTO>();
                        message.poiDTO.add(input.mergeObject(null, PoiDTO.getSchema()));
                        break;

                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, ProximityResponse message) throws IOException
        {
            if(message.poiDTO != null)
            {
                for(PoiDTO poiDTO : message.poiDTO)
                {
                    if(poiDTO != null)
                        output.writeObject(1, poiDTO, PoiDTO.getSchema(), true);
                }
            }

        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "poiDTO";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("poiDTO", 1);
        }
    };
    
}
